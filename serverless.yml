# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: auth

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs4.3
  memorySize: 128
  custom:
    WEB_BUCKET: sample-auth-webpages-bb1325
    USERS_TABLE: SampleAuthUsers

# you can overwrite defaults here
#  stage: dev
  region: eu-west-1
  environment:
    DEVELOPER_PROVIDER_NAME: login.serverelse.com
    API_URL: api.serverelse.com
    USERS_TABLE: ${self:provider.custom.USERS_TABLE}
    EXTERNAL_NAME: Sample Authentication
    EMAIL_RESOURCE: me@serverelse.com
    IDENTITY_POOL_NAME: SampleAuth
    VERIFICATION_PAGE: https://${self:provider.custom.WEB_BUCKET}.s3.amazonaws.com/verify.html
    RESET_PAGE: https://${self:provider.custom.WEB_BUCKET}.s3.amazonaws.com/resetPassword.html

# you can add packaging information here
package:
#  include:
#    - include-me.js
#    - include-me-dir/**
  exclude:
    - html/**
    - .vscode/**

functions:
  createUser:
    handler: functions/createUser.create
    events:
      - http:
          path: create
          method: post
          cors: true

# you can add CloudFormation resource templates here
resources:
  Resources:
    WebBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.custom.WEB_BUCKET}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.custom.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: UsersTable
      Properties:
        PolicyName: lambda-dynamodb-users
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Scan
                - dynamodb:Query
              Resource:
                - { "Fn::Join" : ["", ["arn:aws:dynamodb:${self:provider.region}:*:table/", { "Ref" : "UsersTable" } ] ]  }
                - { "Fn::Join" : ["", ["arn:aws:dynamodb:${self:provider.region}:*:table/", { "Ref" : "UsersTable" }, "/*" ] ]  }
        Roles:
          - Ref: IamRoleLambdaExecution
    SESIamPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: lambda-ses
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
              Resource:
                - arn:aws:ses:${self:provider.region}:*:*/*
        Roles:
          - Ref: IamRoleLambdaExecution
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
